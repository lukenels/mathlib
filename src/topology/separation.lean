/-
Copyright (c) 2017 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl, Mario Carneiro

Separation properties of topological spaces.
-/
import topology.subset_properties
import topology.connected

open set filter
open_locale topological_space filter
local attribute [instance] classical.prop_decidable -- TODO: use "open_locale classical"

universes u v
variables {Œ± : Type u} {Œ≤ : Type v} [topological_space Œ±]

section separation

/--
`separated` is a predicate on pairs of sub`set`s of a topological space.  It holds if the two
sub`set`s are contained in disjoint open sets.
-/
def separated : set Œ± ‚Üí set Œ± ‚Üí Prop :=
  Œª (s t : set Œ±), ‚àÉ U V : (set Œ±), (is_open U) ‚àß is_open V ‚àß
  (s ‚äÜ U) ‚àß (t ‚äÜ V) ‚àß disjoint U V

namespace separated

open separated

@[symm] lemma symm {s t : set Œ±} : separated s t ‚Üí separated t s :=
Œª ‚ü®U, V, oU, oV, aU, bV, UV‚ü©, ‚ü®V, U, oV, oU, bV, aU, disjoint.symm UV‚ü©

lemma comm (s t : set Œ±) : separated s t ‚Üî separated t s :=
‚ü®symm, symm‚ü©

lemma empty_right (a : set Œ±) : separated a ‚àÖ :=
‚ü®_, _, is_open_univ, is_open_empty, Œª a h, mem_univ a, Œª a h, by cases h, disjoint_empty _‚ü©

lemma empty_left (a : set Œ±) : separated ‚àÖ a :=
(empty_right _).symm

lemma union_left {a b c : set Œ±} : separated a c ‚Üí separated b c ‚Üí separated (a ‚à™ b) c :=
Œª ‚ü®U, V, oU, oV, aU, bV, UV‚ü© ‚ü®W, X, oW, oX, aW, bX, WX‚ü©,
  ‚ü®U ‚à™ W, V ‚à© X, is_open_union oU oW, is_open_inter oV oX,
    union_subset_union aU aW, subset_inter bV bX, set.disjoint_union_left.mpr
    ‚ü®disjoint_of_subset_right (inter_subset_left _ _) UV,
      disjoint_of_subset_right (inter_subset_right _ _) WX‚ü©‚ü©

lemma union_right {a b c : set Œ±} (ab : separated a b) (ac : separated a c) :
  separated a (b ‚à™ c) :=
(ab.symm.union_left ac.symm).symm

end separated

/-- A T‚ÇÄ space, also known as a Kolmogorov space, is a topological space
  where for every pair `x ‚â† y`, there is an open set containing one but not the other. -/
class t0_space (Œ± : Type u) [topological_space Œ±] : Prop :=
(t0 : ‚àÄ x y, x ‚â† y ‚Üí ‚àÉ U:set Œ±, is_open U ‚àß (xor (x ‚àà U) (y ‚àà U)))

theorem is_closed.exists_closed_singleton {Œ± : Type*} [topological_space Œ±]
  [t0_space Œ±] [compact_space Œ±] {S : set Œ±} (hS : is_closed S) (hne : S.nonempty) :
  ‚àÉ (x : Œ±), x ‚àà S ‚àß is_closed ({x} : set Œ±) :=
begin
  obtain ‚ü®V, Vsub, Vne, Vcls, hV‚ü© := hS.exists_minimal_nonempty_closed_subset hne,
  by_cases hnt : ‚àÉ (x y : Œ±) (hx : x ‚àà V) (hy : y ‚àà V), x ‚â† y,
  { exfalso,
    obtain ‚ü®x, y, hx, hy, hne‚ü© := hnt,
    obtain ‚ü®U, hU, hsep‚ü© := t0_space.t0 _ _ hne,
    have : ‚àÄ (z w : Œ±) (hz : z ‚àà V) (hw : w ‚àà V) (hz' : z ‚àà U) (hw' : ¬¨ w ‚àà U), false,
    { intros z w hz hw hz' hw',
      have uvne : (V ‚à© U·∂ú).nonempty,
      { use w, simp only [hw, hw', set.mem_inter_eq, not_false_iff, and_self, set.mem_compl_eq], },
      specialize hV (V ‚à© U·∂ú) (set.inter_subset_left _ _) uvne
        (is_closed_inter Vcls (is_closed_compl_iff.mpr hU)),
      have : V ‚äÜ U·∂ú,
      { rw ‚ÜêhV, exact set.inter_subset_right _ _ },
      exact this hz hz', },
    cases hsep,
    { exact this x y hx hy hsep.1 hsep.2 },
    { exact this y x hy hx hsep.1 hsep.2 } },
  { push_neg at hnt,
    obtain ‚ü®z, hz‚ü© := Vne,
    refine ‚ü®z, Vsub hz, _‚ü©,
    convert Vcls,
    ext,
    simp only [set.mem_singleton_iff, set.mem_compl_eq],
    split,
    { rintro rfl, exact hz, },
    { exact Œª hx, hnt x z hx hz, }, },
end

theorem exists_open_singleton_of_open_finset [t0_space Œ±] (s : finset Œ±) (sne : s.nonempty)
  (hso : is_open (‚Üës : set Œ±)) :
  ‚àÉ x ‚àà s, is_open ({x} : set Œ±):=
begin
  induction s using finset.strong_induction_on with s ihs,
  by_cases hs : set.subsingleton (‚Üës : set Œ±),
  { rcases sne with ‚ü®x, hx‚ü©,
    refine ‚ü®x, hx, _‚ü©,
    have : (‚Üës : set Œ±) = {x}, from hs.eq_singleton_of_mem hx,
    rwa this at hso },
  { dunfold set.subsingleton at hs,
    push_neg at hs,
    rcases hs with ‚ü®x, hx, y, hy, hxy‚ü©,
    rcases t0_space.t0 x y hxy with ‚ü®U, hU, hxyU‚ü©,
    wlog H : x ‚àà U ‚àß y ‚àâ U := hxyU using [x y, y x],
    obtain ‚ü®z, hzs, hz‚ü© : ‚àÉ z ‚àà s.filter (Œª z, z ‚àà U), is_open ({z} : set Œ±),
    { refine ihs _ (finset.filter_ssubset.2 ‚ü®y, hy, H.2‚ü©) ‚ü®x, finset.mem_filter.2 ‚ü®hx, H.1‚ü©‚ü© _,
      rw [finset.coe_filter],
      exact is_open_inter hso hU },
    exact ‚ü®z, (finset.mem_filter.1 hzs).1, hz‚ü© }
end

theorem exists_open_singleton_of_fintype [t0_space Œ±] [f : fintype Œ±] [ha : nonempty Œ±] :
  ‚àÉ x:Œ±, is_open ({x}:set Œ±) :=
begin
  refine ha.elim (Œª x, _),
  have : is_open (‚Üë(finset.univ : finset Œ±) : set Œ±), { simp },
  rcases exists_open_singleton_of_open_finset _ ‚ü®x, finset.mem_univ x‚ü© this with ‚ü®x, _, hx‚ü©,
  exact ‚ü®x, hx‚ü©
end

instance subtype.t0_space [t0_space Œ±] {p : Œ± ‚Üí Prop} : t0_space (subtype p) :=
‚ü®Œª x y hxy, let ‚ü®U, hU, hxyU‚ü© := t0_space.t0 (x:Œ±) y ((not_congr subtype.ext_iff_val).1 hxy) in
  ‚ü®(coe : subtype p ‚Üí Œ±) ‚Åª¬π' U, is_open_induced hU, hxyU‚ü©‚ü©

/-- A T‚ÇÅ space, also known as a Fr√©chet space, is a topological space
  where every singleton set is closed. Equivalently, for every pair
  `x ‚â† y`, there is an open set containing `x` and not `y`. -/
class t1_space (Œ± : Type u) [topological_space Œ±] : Prop :=
(t1 : ‚àÄx, is_closed ({x} : set Œ±))

lemma is_closed_singleton [t1_space Œ±] {x : Œ±} : is_closed ({x} : set Œ±) :=
t1_space.t1 x

lemma is_open_compl_singleton [t1_space Œ±] {x : Œ±} : is_open ({x}·∂ú : set Œ±) :=
is_closed_singleton.is_open_compl

lemma is_open_ne [t1_space Œ±] {x : Œ±} : is_open {y | y ‚â† x} :=
is_open_compl_singleton

instance subtype.t1_space {Œ± : Type u} [topological_space Œ±] [t1_space Œ±] {p : Œ± ‚Üí Prop} :
  t1_space (subtype p) :=
‚ü®Œª ‚ü®x, hx‚ü©, is_closed_induced_iff.2 $ ‚ü®{x}, is_closed_singleton, set.ext $ Œª y,
  by simp [subtype.ext_iff_val]‚ü©‚ü©

@[priority 100] -- see Note [lower instance priority]
instance t1_space.t0_space [t1_space Œ±] : t0_space Œ± :=
‚ü®Œª x y h, ‚ü®{z | z ‚â† y}, is_open_ne, or.inl ‚ü®h, not_not_intro rfl‚ü©‚ü©‚ü©

lemma t1_iff_exists_open : t1_space Œ± ‚Üî
  ‚àÄ (x y), x ‚â† y ‚Üí (‚àÉ (U : set Œ±) (hU : is_open U), x ‚àà U ‚àß y ‚àâ U) :=
begin
  split,
  { introsI t1 x y hxy,
    exact ‚ü®{y}·∂ú, is_open_compl_iff.mpr (t1_space.t1 y),
            mem_compl_singleton_iff.mpr hxy,
            not_not.mpr rfl‚ü©},
  { intro h,
    constructor,
    intro x,
    rw ‚Üê is_open_compl_iff,
    have p : ‚ãÉ‚ÇÄ {U : set Œ± | (x ‚àâ U) ‚àß (is_open U)} = {x}·∂ú,
    { apply subset.antisymm; intros t ht,
      { rcases ht with ‚ü®A, ‚ü®hxA, hA‚ü©, htA‚ü©,
        rw [mem_compl_eq, mem_singleton_iff],
        rintro rfl,
        contradiction },
      { obtain ‚ü®U, hU, hh‚ü© := h t x (mem_compl_singleton_iff.mp ht),
        exact ‚ü®U, ‚ü®hh.2, hU‚ü©, hh.1‚ü©}},
    rw ‚Üê p,
    exact is_open_sUnion (Œª B hB, hB.2) }
end

lemma compl_singleton_mem_nhds [t1_space Œ±] {x y : Œ±} (h : y ‚â† x) : {x}·∂ú ‚àà ùìù y :=
mem_nhds_sets is_open_compl_singleton $ by rwa [mem_compl_eq, mem_singleton_iff]

@[simp] lemma closure_singleton [t1_space Œ±] {a : Œ±} :
  closure ({a} : set Œ±) = {a} :=
is_closed_singleton.closure_eq

lemma set.subsingleton.closure [t1_space Œ±] {s : set Œ±} (hs : s.subsingleton) :
  (closure s).subsingleton :=
hs.induction_on (by simp) $ Œª x, by simp

@[simp] lemma subsingleton_closure [t1_space Œ±] {s : set Œ±} :
  (closure s).subsingleton ‚Üî s.subsingleton :=
‚ü®Œª h, h.mono subset_closure, Œª h, h.closure‚ü©

lemma is_closed_map_const {Œ± Œ≤} [topological_space Œ±] [topological_space Œ≤] [t1_space Œ≤] {y : Œ≤} :
  is_closed_map (function.const Œ± y) :=
begin
  apply is_closed_map.of_nonempty, intros s hs h2s, simp_rw [h2s.image_const, is_closed_singleton]
end

lemma discrete_of_t1_of_finite {X : Type*} [topological_space X] [t1_space X] [fintype X] :
  discrete_topology X :=
begin
  apply singletons_open_iff_discrete.mp,
  intros x,
  rw [‚Üê is_closed_compl_iff, ‚Üê bUnion_of_singleton ({x} : set X)·∂ú],
  exact is_closed_bUnion (finite.of_fintype _) (Œª y _, is_closed_singleton)
end

lemma singleton_mem_nhds_within_of_mem_discrete {s : set Œ±} [discrete_topology s]
  {x : Œ±} (hx : x ‚àà s) :
  {x} ‚àà ùìù[s] x :=
begin
  have : ({‚ü®x, hx‚ü©} : set s) ‚àà ùìù (‚ü®x, hx‚ü© : s), by simp [nhds_discrete],
  simpa only [nhds_within_eq_map_subtype_coe hx, image_singleton]
    using @image_mem_map _ _ _ (coe : s ‚Üí Œ±) _ this
end

lemma nhds_within_of_mem_discrete {s : set Œ±} [discrete_topology s] {x : Œ±} (hx : x ‚àà s) :
  ùìù[s] x = pure x :=
le_antisymm (le_pure_iff.2 $ singleton_mem_nhds_within_of_mem_discrete hx) (pure_le_nhds_within hx)

lemma filter.has_basis.exists_inter_eq_singleton_of_mem_discrete
  {Œπ : Type*} {p : Œπ ‚Üí Prop} {t : Œπ ‚Üí set Œ±} {s : set Œ±} [discrete_topology s] {x : Œ±}
  (hb : (ùìù x).has_basis p t) (hx : x ‚àà s) :
  ‚àÉ i (hi : p i), t i ‚à© s = {x} :=
begin
  rcases (nhds_within_has_basis hb s).mem_iff.1 (singleton_mem_nhds_within_of_mem_discrete hx)
    with ‚ü®i, hi, hix‚ü©,
  exact ‚ü®i, hi, subset.antisymm hix $ singleton_subset_iff.2 ‚ü®mem_of_nhds $ hb.mem_of_mem hi, hx‚ü©‚ü©
end

/-- A point `x` in a discrete subset `s` of a topological space admits a neighbourhood
that only meets `s` at `x`.  -/
lemma nhds_inter_eq_singleton_of_mem_discrete {s : set Œ±} [discrete_topology s]
  {x : Œ±} (hx : x ‚àà s) :
  ‚àÉ U ‚àà ùìù x, U ‚à© s = {x} :=
by simpa using (ùìù x).basis_sets.exists_inter_eq_singleton_of_mem_discrete hx

/-- For point `x` in a discrete subset `s` of a topological space, there is a set `U`
such that
1. `U` is a punctured neighborhood of `x` (ie. `U ‚à™ {x}` is a neighbourhood of `x`),
2. `U` is disjoint from `s`.
-/
lemma disjoint_nhds_within_of_mem_discrete {s : set Œ±} [discrete_topology s] {x : Œ±} (hx : x ‚àà s) :
  ‚àÉ U ‚àà ùìù[{x}·∂ú] x, disjoint U s :=
let ‚ü®V, h, h'‚ü© := nhds_inter_eq_singleton_of_mem_discrete hx in
  ‚ü®{x}·∂ú ‚à© V, inter_mem_nhds_within _ h,
    (disjoint_iff_inter_eq_empty.mpr (by { rw [inter_assoc, h', compl_inter_self] }))‚ü©

/-- Let `X` be a topological space and let `s, t ‚äÜ X` be two subsets.  If there is an inclusion
`t ‚äÜ s`, then the topological space structure on `t` induced by `X` is the same as the one
obtained by the induced topological space structure on `s`. -/
lemma topological_space.subset_trans {X : Type*} [tX : topological_space X]
  {s t : set X} (ts : t ‚äÜ s) :
  (subtype.topological_space : topological_space t) =
    (subtype.topological_space : topological_space s).induced (set.inclusion ts) :=
begin
  change tX.induced ((coe : s ‚Üí X) ‚àò (set.inclusion ts)) =
    topological_space.induced (set.inclusion ts) (tX.induced _),
  rw ‚Üê induced_compose,
end

/-- This lemma characterizes discrete topological spaces as those whose singletons are
neighbourhoods. -/
lemma discrete_topology_iff_nhds {X : Type*} [topological_space X] :
  discrete_topology X ‚Üî (nhds : X ‚Üí filter X) = pure :=
begin
  split,
  { introI hX,
    exact nhds_discrete X },
  { intro h,
    constructor,
    apply eq_of_nhds_eq_nhds,
    simp [h, nhds_bot] }
end

/-- The topology pulled-back under an inclusion `f : X ‚Üí Y` from the discrete topology (`‚ä•`) is the
discrete topology.
This version does not assume the choice of a topology on either the source `X`
nor the target `Y` of the inclusion `f`. -/
lemma induced_bot {X Y : Type*} {f : X ‚Üí Y} (hf : function.injective f) :
  topological_space.induced f ‚ä• = ‚ä• :=
eq_of_nhds_eq_nhds (by simp [nhds_induced, ‚Üê set.image_singleton, hf.preimage_image, nhds_bot])

/-- The topology induced under an inclusion `f : X ‚Üí Y` from the discrete topological space `Y`
is the discrete topology on `X`. -/
lemma discrete_topology_induced {X Y : Type*} [tY : topological_space Y] [discrete_topology Y]
  {f : X ‚Üí Y} (hf : function.injective f) : @discrete_topology X (topological_space.induced f tY) :=
begin
  constructor,
  rw discrete_topology.eq_bot Y,
  exact induced_bot hf
end

/-- Let `s, t ‚äÜ X` be two subsets of a topological space `X`.  If `t ‚äÜ s` and the topology induced
by `X`on `s` is discrete, then also the topology induces on `t` is discrete.  -/
lemma discrete_topology.of_subset {X : Type*} [topological_space X] {s t : set X}
  (ds : discrete_topology s) (ts : t ‚äÜ s) :
  discrete_topology t :=
begin
  rw [topological_space.subset_trans ts, ds.eq_bot],
  exact {eq_bot := induced_bot (set.inclusion_injective ts)}
end

/-- A T‚ÇÇ space, also known as a Hausdorff space, is one in which for every
  `x ‚â† y` there exists disjoint open sets around `x` and `y`. This is
  the most widely used of the separation axioms. -/
class t2_space (Œ± : Type u) [topological_space Œ±] : Prop :=
(t2 : ‚àÄx y, x ‚â† y ‚Üí ‚àÉu v : set Œ±, is_open u ‚àß is_open v ‚àß x ‚àà u ‚àß y ‚àà v ‚àß u ‚à© v = ‚àÖ)

lemma t2_separation [t2_space Œ±] {x y : Œ±} (h : x ‚â† y) :
  ‚àÉu v : set Œ±, is_open u ‚àß is_open v ‚àß x ‚àà u ‚àß y ‚àà v ‚àß u ‚à© v = ‚àÖ :=
t2_space.t2 x y h

@[priority 100] -- see Note [lower instance priority]
instance t2_space.t1_space [t2_space Œ±] : t1_space Œ± :=
‚ü®Œª x, is_open_compl_iff.1 $ is_open_iff_forall_mem_open.2 $ Œª y hxy,
let ‚ü®u, v, hu, hv, hyu, hxv, huv‚ü© := t2_separation (mt mem_singleton_of_eq hxy) in
‚ü®u, Œª z hz1 hz2, (ext_iff.1 huv x).1 ‚ü®mem_singleton_iff.1 hz2 ‚ñ∏ hz1, hxv‚ü©, hu, hyu‚ü©‚ü©

lemma eq_of_nhds_ne_bot [ht : t2_space Œ±] {x y : Œ±} (h : ne_bot (ùìù x ‚äì ùìù y)) : x = y :=
classical.by_contradiction $ assume : x ‚â† y,
let ‚ü®u, v, hu, hv, hx, hy, huv‚ü© := t2_space.t2 x y this in
absurd huv $ (inf_ne_bot_iff.1 h (mem_nhds_sets hu hx) (mem_nhds_sets hv hy)).ne_empty

lemma t2_iff_nhds : t2_space Œ± ‚Üî ‚àÄ {x y : Œ±}, ne_bot (ùìù x ‚äì ùìù y) ‚Üí x = y :=
‚ü®assume h, by exactI Œª x y, eq_of_nhds_ne_bot,
 assume h, ‚ü®assume x y xy,
   have ùìù x ‚äì ùìù y = ‚ä• := not_ne_bot.1 $ mt h xy,
   let ‚ü®u', hu', v', hv', u'v'‚ü© := empty_in_sets_eq_bot.mpr this,
       ‚ü®u, uu', uo, hu‚ü© := mem_nhds_sets_iff.mp hu',
       ‚ü®v, vv', vo, hv‚ü© := mem_nhds_sets_iff.mp hv' in
   ‚ü®u, v, uo, vo, hu, hv, disjoint.eq_bot $ disjoint.mono uu' vv' u'v'‚ü©‚ü©‚ü©

lemma t2_iff_ultrafilter :
  t2_space Œ± ‚Üî ‚àÄ {x y : Œ±} (f : ultrafilter Œ±), ‚Üëf ‚â§ ùìù x ‚Üí ‚Üëf ‚â§ ùìù y ‚Üí x = y :=
t2_iff_nhds.trans $ by simp only [‚Üêexists_ultrafilter_iff, and_imp, le_inf_iff, exists_imp_distrib]

lemma is_closed_diagonal [t2_space Œ±] : is_closed (diagonal Œ±) :=
begin
  refine is_closed_iff_cluster_pt.mpr _,
  rintro ‚ü®a‚ÇÅ, a‚ÇÇ‚ü© h,
  refine eq_of_nhds_ne_bot ‚ü®Œª this : ùìù a‚ÇÅ ‚äì ùìù a‚ÇÇ = ‚ä•, h.ne _‚ü©,
  obtain ‚ü®t‚ÇÅ, (ht‚ÇÅ : t‚ÇÅ ‚àà ùìù a‚ÇÅ), t‚ÇÇ, (ht‚ÇÇ : t‚ÇÇ ‚àà ùìù a‚ÇÇ), (h' : t‚ÇÅ ‚à© t‚ÇÇ ‚äÜ ‚àÖ)‚ü© :=
    by rw [‚Üêempty_in_sets_eq_bot, mem_inf_sets] at this; exact this,
  rw [nhds_prod_eq, ‚Üêempty_in_sets_eq_bot],
  apply filter.sets_of_superset,
  apply inter_mem_inf_sets (prod_mem_prod ht‚ÇÅ ht‚ÇÇ) (mem_principal_sets.mpr (subset.refl _)),
  exact assume ‚ü®x‚ÇÅ, x‚ÇÇ‚ü© ‚ü®‚ü®hx‚ÇÅ, hx‚ÇÇ‚ü©, (heq : x‚ÇÅ = x‚ÇÇ)‚ü©,
    show false, from @h' x‚ÇÅ ‚ü®hx‚ÇÅ, heq.symm ‚ñ∏ hx‚ÇÇ‚ü©
end

lemma t2_iff_is_closed_diagonal : t2_space Œ± ‚Üî is_closed (diagonal Œ±) :=
begin
  split,
  { introI h,
    exact is_closed_diagonal },
  { intro h,
    constructor,
    intros x y hxy,
    have : (x, y) ‚àà (diagonal Œ±)·∂ú, by rwa [mem_compl_iff],
    obtain ‚ü®t, t_sub, t_op, xyt‚ü© : ‚àÉ t ‚äÜ (diagonal Œ±)·∂ú, is_open t ‚àß (x, y) ‚àà t :=
      is_open_iff_forall_mem_open.mp h.is_open_compl _ this,
    rcases is_open_prod_iff.mp t_op x y xyt with ‚ü®U, V, U_op, V_op, xU, yV, H‚ü©,
    use [U, V, U_op, V_op, xU, yV],
    have := subset.trans H t_sub,
    rw eq_empty_iff_forall_not_mem,
    rintros z ‚ü®zU, zV‚ü©,
    have : ¬¨ (z, z) ‚àà diagonal Œ± := this (mk_mem_prod zU zV),
    exact this rfl },
end

section separated

open separated finset

lemma finset_disjoint_finset_opens_of_t2 [t2_space Œ±] :
  ‚àÄ (s t : finset Œ±), disjoint s t ‚Üí separated (s : set Œ±) t :=
begin
  refine induction_on_union _ (Œª a b hi d, (hi d.symm).symm) (Œª a d, empty_right a) (Œª a b ab, _) _,
  { obtain ‚ü®U, V, oU, oV, aU, bV, UV‚ü© := t2_separation
      (by { rw [ne.def, ‚Üê finset.mem_singleton], exact (disjoint_singleton.mp ab.symm) }),
    refine ‚ü®U, V, oU, oV, _, _, set.disjoint_iff_inter_eq_empty.mpr UV‚ü©;
    exact singleton_subset_set_iff.mpr ‚Äπ_‚Ä∫ },
  { intros a b c ac bc d,
    apply_mod_cast union_left (ac (disjoint_of_subset_left (a.subset_union_left b) d)) (bc _),
    exact disjoint_of_subset_left (a.subset_union_right b) d },
end

lemma point_disjoint_finset_opens_of_t2 [t2_space Œ±] {x : Œ±} {s : finset Œ±} (h : x ‚àâ s) :
  separated ({x} : set Œ±) ‚Üës :=
by exact_mod_cast finset_disjoint_finset_opens_of_t2 {x} s (singleton_disjoint.mpr h)

end separated

@[simp] lemma nhds_eq_nhds_iff {a b : Œ±} [t2_space Œ±] : ùìù a = ùìù b ‚Üî a = b :=
‚ü®assume h, eq_of_nhds_ne_bot $ by rw [h, inf_idem]; exact nhds_ne_bot, assume h, h ‚ñ∏ rfl‚ü©

@[simp] lemma nhds_le_nhds_iff {a b : Œ±} [t2_space Œ±] : ùìù a ‚â§ ùìù b ‚Üî a = b :=
‚ü®assume h, eq_of_nhds_ne_bot $ by rw [inf_of_le_left h]; exact nhds_ne_bot, assume h, h ‚ñ∏ le_refl _‚ü©

lemma tendsto_nhds_unique [t2_space Œ±] {f : Œ≤ ‚Üí Œ±} {l : filter Œ≤} {a b : Œ±}
  [ne_bot l] (ha : tendsto f l (ùìù a)) (hb : tendsto f l (ùìù b)) : a = b :=
eq_of_nhds_ne_bot $ ne_bot_of_le $ le_inf ha hb

lemma tendsto_nhds_unique' [t2_space Œ±] {f : Œ≤ ‚Üí Œ±} {l : filter Œ≤} {a b : Œ±}
  (hl : ne_bot l) (ha : tendsto f l (ùìù a)) (hb : tendsto f l (ùìù b)) : a = b :=
eq_of_nhds_ne_bot $ ne_bot_of_le $ le_inf ha hb

lemma tendsto_nhds_unique_of_eventually_eq [t2_space Œ±] {f g : Œ≤ ‚Üí Œ±} {l : filter Œ≤} {a b : Œ±}
  [ne_bot l] (ha : tendsto f l (ùìù a)) (hb : tendsto g l (ùìù b)) (hfg : f =·∂†[l] g) :
  a = b :=
tendsto_nhds_unique (ha.congr' hfg) hb

/-- A T2,5 space, also known as a Urysohn space, is a topological space
  where for every pair `x ‚â† y`, there are two open sets, with the intersection of clousures
  empty, one containing `x` and the other `y` . -/
class t2_5_space (Œ± : Type u) [topological_space Œ±]: Prop :=
(t2_5 : ‚àÄ x y  (h : x ‚â† y), ‚àÉ (U V: set Œ±), is_open U ‚àß  is_open V ‚àß
                                            closure U ‚à© closure V = ‚àÖ ‚àß x ‚àà U ‚àß y ‚àà V)

@[priority 100] -- see Note [lower instance priority]
instance t2_5_space.t2_space [t2_5_space Œ±] : t2_space Œ± :=
‚ü®Œª x y hxy,
  let ‚ü®U, V, hU, hV, hUV, hh‚ü© := t2_5_space.t2_5 x y hxy in
  ‚ü®U, V, hU, hV, hh.1, hh.2, subset_eq_empty (powerset_mono.mpr
    (closure_inter_subset_inter_closure U V) subset_closure) hUV‚ü©‚ü©

section lim
variables [t2_space Œ±] {f : filter Œ±}

/-!
### Properties of `Lim` and `lim`

In this section we use explicit `nonempty Œ±` instances for `Lim` and `lim`. This way the lemmas
are useful without a `nonempty Œ±` instance.
-/

lemma Lim_eq {a : Œ±} [ne_bot f] (h : f ‚â§ ùìù a) :
  @Lim _ _ ‚ü®a‚ü© f = a :=
tendsto_nhds_unique (le_nhds_Lim ‚ü®a, h‚ü©) h

lemma Lim_eq_iff [ne_bot f] (h : ‚àÉ (a : Œ±), f ‚â§ nhds a) {a} : @Lim _ _ ‚ü®a‚ü© f = a ‚Üî f ‚â§ ùìù a :=
‚ü®Œª c, c ‚ñ∏ le_nhds_Lim h, Lim_eq‚ü©

lemma ultrafilter.Lim_eq_iff_le_nhds [compact_space Œ±] {x : Œ±} {F : ultrafilter Œ±} :
  F.Lim = x ‚Üî ‚ÜëF ‚â§ ùìù x :=
‚ü®Œª h, h ‚ñ∏ F.le_nhds_Lim, Lim_eq‚ü©

lemma is_open_iff_ultrafilter' [compact_space Œ±] (U : set Œ±) :
  is_open U ‚Üî (‚àÄ F : ultrafilter Œ±, F.Lim ‚àà U ‚Üí U ‚àà F.1) :=
begin
  rw is_open_iff_ultrafilter,
  refine ‚ü®Œª h F hF, h F.Lim hF F F.le_nhds_Lim, _‚ü©,
  intros cond x hx f h,
  rw [‚Üê (ultrafilter.Lim_eq_iff_le_nhds.2 h)] at hx,
  exact cond _ hx
end

lemma filter.tendsto.lim_eq {a : Œ±} {f : filter Œ≤} [ne_bot f] {g : Œ≤ ‚Üí Œ±} (h : tendsto g f (ùìù a)) :
  @lim _ _ _ ‚ü®a‚ü© f g = a :=
Lim_eq h

lemma filter.lim_eq_iff {f : filter Œ≤} [ne_bot f] {g : Œ≤ ‚Üí Œ±} (h : ‚àÉ a, tendsto g f (ùìù a)) {a} :
  @lim _ _ _ ‚ü®a‚ü© f g = a ‚Üî tendsto g f (ùìù a) :=
‚ü®Œª c, c ‚ñ∏ tendsto_nhds_lim h, filter.tendsto.lim_eq‚ü©

lemma continuous.lim_eq [topological_space Œ≤] {f : Œ≤ ‚Üí Œ±} (h : continuous f) (a : Œ≤) :
  @lim _ _ _ ‚ü®f a‚ü© (ùìù a) f = f a :=
(h.tendsto a).lim_eq

@[simp] lemma Lim_nhds (a : Œ±) : @Lim _ _ ‚ü®a‚ü© (ùìù a) = a :=
Lim_eq (le_refl _)

@[simp] lemma lim_nhds_id (a : Œ±) : @lim _ _ _ ‚ü®a‚ü© (ùìù a) id = a :=
Lim_nhds a

@[simp] lemma Lim_nhds_within {a : Œ±} {s : set Œ±} (h : a ‚àà closure s) :
  @Lim _ _ ‚ü®a‚ü© (ùìù[s] a) = a :=
by haveI : ne_bot (ùìù[s] a) := mem_closure_iff_cluster_pt.1 h;
exact Lim_eq inf_le_left

@[simp] lemma lim_nhds_within_id {a : Œ±} {s : set Œ±} (h : a ‚àà closure s) :
  @lim _ _ _ ‚ü®a‚ü© (ùìù[s] a) id = a :=
Lim_nhds_within h

end lim

/-!
### Instances of `t2_space` typeclass

We use two lemmas to prove that various standard constructions generate Hausdorff spaces from
Hausdorff spaces:

* `separated_by_continuous` says that two points `x y : Œ±` can be separated by open neighborhoods
  provided that there exists a continuous map `f`: Œ± ‚Üí Œ≤` with a Hausdorff codomain such that
  `f x ‚â† f y`. We use this lemma to prove that topological spaces defined using `induced` are
  Hausdorff spaces.

* `separated_by_open_embedding` says that for an open embedding `f : Œ± ‚Üí Œ≤` of a Hausdorff space
  `Œ±`, the images of two distinct points `x y : Œ±`, `x ‚â† y` can be separated by open neighborhoods.
  We use this lemma to prove that topological spaces defined using `coinduced` are Hausdorff spaces.
-/

@[priority 100] -- see Note [lower instance priority]
instance t2_space_discrete {Œ± : Type*} [topological_space Œ±] [discrete_topology Œ±] : t2_space Œ± :=
{ t2 := assume x y hxy, ‚ü®{x}, {y}, is_open_discrete _, is_open_discrete _, rfl, rfl,
  eq_empty_iff_forall_not_mem.2 $ by intros z hz;
    cases eq_of_mem_singleton hz.1; cases eq_of_mem_singleton hz.2; cc‚ü© }

lemma separated_by_continuous {Œ± : Type*} {Œ≤ : Type*}
  [topological_space Œ±] [topological_space Œ≤] [t2_space Œ≤]
  {f : Œ± ‚Üí Œ≤} (hf : continuous f) {x y : Œ±} (h : f x ‚â† f y) :
  ‚àÉu v : set Œ±, is_open u ‚àß is_open v ‚àß x ‚àà u ‚àß y ‚àà v ‚àß u ‚à© v = ‚àÖ :=
let ‚ü®u, v, uo, vo, xu, yv, uv‚ü© := t2_separation h in
‚ü®f ‚Åª¬π' u, f ‚Åª¬π' v, uo.preimage hf, vo.preimage hf, xu, yv,
  by rw [‚Üêpreimage_inter, uv, preimage_empty]‚ü©

lemma separated_by_open_embedding {Œ± Œ≤ : Type*} [topological_space Œ±] [topological_space Œ≤]
  [t2_space Œ±] {f : Œ± ‚Üí Œ≤} (hf : open_embedding f) {x y : Œ±} (h : x ‚â† y) :
  ‚àÉ u v : set Œ≤, is_open u ‚àß is_open v ‚àß f x ‚àà u ‚àß f y ‚àà v ‚àß u ‚à© v = ‚àÖ :=
let ‚ü®u, v, uo, vo, xu, yv, uv‚ü© := t2_separation h in
‚ü®f '' u, f '' v, hf.is_open_map _ uo, hf.is_open_map _ vo,
  mem_image_of_mem _ xu, mem_image_of_mem _ yv, by rw [image_inter hf.inj, uv, image_empty]‚ü©

instance {Œ± : Type*} {p : Œ± ‚Üí Prop} [t : topological_space Œ±] [t2_space Œ±] : t2_space (subtype p) :=
‚ü®assume x y h, separated_by_continuous continuous_subtype_val (mt subtype.eq h)‚ü©

instance {Œ± : Type*} {Œ≤ : Type*} [t‚ÇÅ : topological_space Œ±] [t2_space Œ±]
  [t‚ÇÇ : topological_space Œ≤] [t2_space Œ≤] : t2_space (Œ± √ó Œ≤) :=
‚ü®assume ‚ü®x‚ÇÅ,x‚ÇÇ‚ü© ‚ü®y‚ÇÅ,y‚ÇÇ‚ü© h,
  or.elim (not_and_distrib.mp (mt prod.ext_iff.mpr h))
    (Œª h‚ÇÅ, separated_by_continuous continuous_fst h‚ÇÅ)
    (Œª h‚ÇÇ, separated_by_continuous continuous_snd h‚ÇÇ)‚ü©

lemma embedding.t2_space [topological_space Œ≤] [t2_space Œ≤] {f : Œ± ‚Üí Œ≤} (hf : embedding f) :
  t2_space Œ± :=
‚ü®Œª x y h, separated_by_continuous hf.continuous (hf.inj.ne h)‚ü©

instance {Œ± : Type*} {Œ≤ : Type*} [t‚ÇÅ : topological_space Œ±] [t2_space Œ±]
  [t‚ÇÇ : topological_space Œ≤] [t2_space Œ≤] : t2_space (Œ± ‚äï Œ≤) :=
begin
  constructor,
  rintros (x|x) (y|y) h,
  { replace h : x ‚â† y := Œª c, (c.subst h) rfl,
    exact separated_by_open_embedding open_embedding_inl h },
  { exact ‚ü®_, _, is_open_range_inl, is_open_range_inr, ‚ü®x, rfl‚ü©, ‚ü®y, rfl‚ü©,
      range_inl_inter_range_inr‚ü© },
  { exact ‚ü®_, _, is_open_range_inr, is_open_range_inl, ‚ü®x, rfl‚ü©, ‚ü®y, rfl‚ü©,
      range_inr_inter_range_inl‚ü© },
  { replace h : x ‚â† y := Œª c, (c.subst h) rfl,
    exact separated_by_open_embedding open_embedding_inr h }
end

instance Pi.t2_space {Œ± : Type*} {Œ≤ : Œ± ‚Üí Type v} [t‚ÇÇ : Œ†a, topological_space (Œ≤ a)]
  [‚àÄa, t2_space (Œ≤ a)] :
  t2_space (Œ†a, Œ≤ a) :=
‚ü®assume x y h,
  let ‚ü®i, hi‚ü© := not_forall.mp (mt funext h) in
  separated_by_continuous (continuous_apply i) hi‚ü©

instance sigma.t2_space {Œπ : Type*} {Œ± : Œπ ‚Üí Type*} [Œ†i, topological_space (Œ± i)]
  [‚àÄa, t2_space (Œ± a)] :
  t2_space (Œ£i, Œ± i) :=
begin
  constructor,
  rintros ‚ü®i, x‚ü© ‚ü®j, y‚ü© neq,
  rcases em (i = j) with (rfl|h),
  { replace neq : x ‚â† y := Œª c, (c.subst neq) rfl,
    exact separated_by_open_embedding open_embedding_sigma_mk neq },
  { exact ‚ü®_, _, is_open_range_sigma_mk, is_open_range_sigma_mk, ‚ü®x, rfl‚ü©, ‚ü®y, rfl‚ü©, by tidy‚ü© }
end

variables [topological_space Œ≤]

lemma is_closed_eq [t2_space Œ±] {f g : Œ≤ ‚Üí Œ±}
  (hf : continuous f) (hg : continuous g) : is_closed {x:Œ≤ | f x = g x} :=
continuous_iff_is_closed.mp (hf.prod_mk hg) _ is_closed_diagonal

/-- If two continuous maps are equal on `s`, then they are equal on the closure of `s`. -/
lemma set.eq_on.closure [t2_space Œ±] {s : set Œ≤} {f g : Œ≤ ‚Üí Œ±} (h : eq_on f g s)
  (hf : continuous f) (hg : continuous g) :
  eq_on f g (closure s) :=
closure_minimal h (is_closed_eq hf hg)

/-- If two continuous functions are equal on a dense set, then they are equal. -/
lemma continuous.ext_on [t2_space Œ±] {s : set Œ≤} (hs : dense s) {f g : Œ≤ ‚Üí Œ±}
  (hf : continuous f) (hg : continuous g) (h : eq_on f g s) :
  f = g :=
funext $ Œª x, h.closure hf hg (hs x)

lemma function.left_inverse.closed_range [t2_space Œ±] {f : Œ± ‚Üí Œ≤} {g : Œ≤ ‚Üí Œ±}
  (h : function.left_inverse f g) (hf : continuous f) (hg : continuous g) :
  is_closed (range g) :=
have eq_on (g ‚àò f) id (closure $ range g),
  from h.right_inv_on_range.eq_on.closure (hg.comp hf) continuous_id,
is_closed_of_closure_subset $ Œª x hx,
calc x = g (f x) : (this hx).symm
   ... ‚àà _ : mem_range_self _

lemma function.left_inverse.closed_embedding [t2_space Œ±] {f : Œ± ‚Üí Œ≤} {g : Œ≤ ‚Üí Œ±}
  (h : function.left_inverse f g) (hf : continuous f) (hg : continuous g) :
  closed_embedding g :=
‚ü®h.embedding hf hg, h.closed_range hf hg‚ü©

lemma diagonal_eq_range_diagonal_map {Œ± : Type*} : {p:Œ±√óŒ± | p.1 = p.2} = range (Œªx, (x,x)) :=
ext $ assume p, iff.intro
  (assume h, ‚ü®p.1, prod.ext_iff.2 ‚ü®rfl, h‚ü©‚ü©)
  (assume ‚ü®x, hx‚ü©, show p.1 = p.2, by rw ‚Üêhx)

lemma prod_subset_compl_diagonal_iff_disjoint {Œ± : Type*} {s t : set Œ±} :
  set.prod s t ‚äÜ {p:Œ±√óŒ± | p.1 = p.2}·∂ú ‚Üî s ‚à© t = ‚àÖ :=
by rw [eq_empty_iff_forall_not_mem, subset_compl_comm,
       diagonal_eq_range_diagonal_map, range_subset_iff]; simp

lemma compact_compact_separated [t2_space Œ±] {s t : set Œ±}
  (hs : is_compact s) (ht : is_compact t) (hst : s ‚à© t = ‚àÖ) :
  ‚àÉu v : set Œ±, is_open u ‚àß is_open v ‚àß s ‚äÜ u ‚àß t ‚äÜ v ‚àß u ‚à© v = ‚àÖ :=
by simp only [prod_subset_compl_diagonal_iff_disjoint.symm] at ‚ä¢ hst;
   exact generalized_tube_lemma hs ht is_closed_diagonal.is_open_compl hst

/-- In a `t2_space`, every compact set is closed. -/
lemma is_compact.is_closed [t2_space Œ±] {s : set Œ±} (hs : is_compact s) : is_closed s :=
is_open_compl_iff.1 $ is_open_iff_forall_mem_open.mpr $ assume x hx,
  let ‚ü®u, v, uo, vo, su, xv, uv‚ü© :=
    compact_compact_separated hs (compact_singleton : is_compact {x})
      (by rwa [inter_comm, ‚Üêsubset_compl_iff_disjoint, singleton_subset_iff]) in
  have v ‚äÜ s·∂ú, from
    subset_compl_comm.mp (subset.trans su (subset_compl_iff_disjoint.mpr uv)),
‚ü®v, this, vo, by simpa using xv‚ü©

lemma compact_exhaustion.is_closed [t2_space Œ±] (K : compact_exhaustion Œ±) (n : ‚Ñï) :
  is_closed (K n) :=
(K.is_compact n).is_closed

lemma is_compact.inter [t2_space Œ±] {s t : set Œ±} (hs : is_compact s) (ht : is_compact t) :
  is_compact (s ‚à© t) :=
hs.inter_right $ ht.is_closed

lemma compact_closure_of_subset_compact [t2_space Œ±] {s t : set Œ±} (ht : is_compact t) (h : s ‚äÜ t) :
  is_compact (closure s) :=
compact_of_is_closed_subset ht is_closed_closure (closure_minimal h ht.is_closed)

lemma image_closure_of_compact [t2_space Œ≤]
  {s : set Œ±} (hs : is_compact (closure s)) {f : Œ± ‚Üí Œ≤} (hf : continuous_on f (closure s)) :
  f '' closure s = closure (f '' s) :=
subset.antisymm hf.image_closure $ closure_minimal (image_subset f subset_closure)
  (hs.image_of_continuous_on hf).is_closed

/-- If a compact set is covered by two open sets, then we can cover it by two compact subsets. -/
lemma is_compact.binary_compact_cover [t2_space Œ±] {K U V : set Œ±} (hK : is_compact K)
  (hU : is_open U) (hV : is_open V) (h2K : K ‚äÜ U ‚à™ V) :
  ‚àÉ K‚ÇÅ K‚ÇÇ : set Œ±, is_compact K‚ÇÅ ‚àß is_compact K‚ÇÇ ‚àß K‚ÇÅ ‚äÜ U ‚àß K‚ÇÇ ‚äÜ V ‚àß K = K‚ÇÅ ‚à™ K‚ÇÇ :=
begin
  rcases compact_compact_separated (compact_diff hK hU) (compact_diff hK hV)
    (by rwa [diff_inter_diff, diff_eq_empty]) with ‚ü®O‚ÇÅ, O‚ÇÇ, h1O‚ÇÅ, h1O‚ÇÇ, h2O‚ÇÅ, h2O‚ÇÇ, hO‚ü©,
  refine ‚ü®_, _, compact_diff hK h1O‚ÇÅ, compact_diff hK h1O‚ÇÇ,
    by rwa [diff_subset_comm], by rwa [diff_subset_comm], by rw [‚Üê diff_inter, hO, diff_empty]‚ü©
end

lemma continuous.is_closed_map [compact_space Œ±] [t2_space Œ≤] {f : Œ± ‚Üí Œ≤} (h : continuous f) :
  is_closed_map f :=
Œª s hs, (hs.compact.image h).is_closed

lemma continuous.closed_embedding [compact_space Œ±] [t2_space Œ≤] {f : Œ± ‚Üí Œ≤} (h : continuous f)
  (hf : function.injective f) : closed_embedding f :=
closed_embedding_of_continuous_injective_closed h hf h.is_closed_map

section
open finset function
/-- For every finite open cover `U·µ¢` of a compact set, there exists a compact cover `K·µ¢ ‚äÜ U·µ¢`. -/
lemma is_compact.finite_compact_cover [t2_space Œ±] {s : set Œ±} (hs : is_compact s)
  {Œπ} (t : finset Œπ) (U : Œπ ‚Üí set Œ±) (hU : ‚àÄ i ‚àà t, is_open (U i)) (hsC : s ‚äÜ ‚ãÉ i ‚àà t, U i) :
  ‚àÉ K : Œπ ‚Üí set Œ±, (‚àÄ i, is_compact (K i)) ‚àß (‚àÄi, K i ‚äÜ U i) ‚àß s = ‚ãÉ i ‚àà t, K i :=
begin
  classical,
  induction t using finset.induction with x t hx ih generalizing U hU s hs hsC,
  { refine ‚ü®Œª _, ‚àÖ, Œª i, compact_empty, Œª i, empty_subset _, _‚ü©, simpa only [subset_empty_iff,
      finset.not_mem_empty, Union_neg, Union_empty, not_false_iff] using hsC },
  simp only [finset.set_bUnion_insert] at hsC,
  simp only [finset.mem_insert] at hU,
  have hU' : ‚àÄ i ‚àà t, is_open (U i) := Œª i hi, hU i (or.inr hi),
  rcases hs.binary_compact_cover (hU x (or.inl rfl)) (is_open_bUnion hU') hsC
    with ‚ü®K‚ÇÅ, K‚ÇÇ, h1K‚ÇÅ, h1K‚ÇÇ, h2K‚ÇÅ, h2K‚ÇÇ, hK‚ü©,
  rcases ih U hU' h1K‚ÇÇ h2K‚ÇÇ with ‚ü®K, h1K, h2K, h3K‚ü©,
  refine ‚ü®update K x K‚ÇÅ, _, _, _‚ü©,
  { intros i, by_cases hi : i = x,
    { simp only [update_same, hi, h1K‚ÇÅ] },
    { rw [‚Üê ne.def] at hi, simp only [update_noteq hi, h1K] }},
  { intros i, by_cases hi : i = x,
    { simp only [update_same, hi, h2K‚ÇÅ] },
    { rw [‚Üê ne.def] at hi, simp only [update_noteq hi, h2K] }},
  { simp only [set_bUnion_insert_update _ hx, hK, h3K] }
end
end

lemma locally_compact_of_compact_nhds [t2_space Œ±] (h : ‚àÄ x : Œ±, ‚àÉ s, s ‚àà ùìù x ‚àß is_compact s) :
  locally_compact_space Œ± :=
‚ü®assume x n hn,
  let ‚ü®u, un, uo, xu‚ü© := mem_nhds_sets_iff.mp hn in
  let ‚ü®k, kx, kc‚ü© := h x in
  -- K is compact but not necessarily contained in N.
  -- K \ U is again compact and doesn't contain x, so
  -- we may find open sets V, W separating x from K \ U.
  -- Then K \ W is a compact neighborhood of x contained in U.
  let ‚ü®v, w, vo, wo, xv, kuw, vw‚ü© :=
    compact_compact_separated compact_singleton (compact_diff kc uo)
      (by rw [singleton_inter_eq_empty]; exact Œª h, h.2 xu) in
  have wn : w·∂ú ‚àà ùìù x, from
   mem_nhds_sets_iff.mpr
     ‚ü®v, subset_compl_iff_disjoint.mpr vw, vo, singleton_subset_iff.mp xv‚ü©,
  ‚ü®k \ w,
   filter.inter_mem_sets kx wn,
   subset.trans (diff_subset_comm.mp kuw) un,
   compact_diff kc wo‚ü©‚ü©

@[priority 100] -- see Note [lower instance priority]
instance locally_compact_of_compact [t2_space Œ±] [compact_space Œ±] : locally_compact_space Œ± :=
locally_compact_of_compact_nhds (assume x, ‚ü®univ, mem_nhds_sets is_open_univ trivial, compact_univ‚ü©)

/-- In a locally compact T‚ÇÇ space, every point has an open neighborhood with compact closure -/
lemma exists_open_with_compact_closure [locally_compact_space Œ±] [t2_space Œ±] (x : Œ±) :
  ‚àÉ (U : set Œ±), is_open U ‚àß x ‚àà U ‚àß is_compact (closure U) :=
begin
  rcases exists_compact_mem_nhds x with ‚ü®K, hKc, hxK‚ü©,
  rcases mem_nhds_sets_iff.1 hxK with ‚ü®t, h1t, h2t, h3t‚ü©,
  exact ‚ü®t, h2t, h3t, compact_closure_of_subset_compact hKc h1t‚ü©
end

end separation

section regularity

/-- A T‚ÇÉ space, also known as a regular space (although this condition sometimes
  omits T‚ÇÇ), is one in which for every closed `C` and `x ‚àâ C`, there exist
  disjoint open sets containing `x` and `C` respectively. -/
class regular_space (Œ± : Type u) [topological_space Œ±] extends t0_space Œ± : Prop :=
(regular : ‚àÄ{s:set Œ±} {a}, is_closed s ‚Üí a ‚àâ s ‚Üí ‚àÉt, is_open t ‚àß s ‚äÜ t ‚àß ùìù[t] a = ‚ä•)

@[priority 100] -- see Note [lower instance priority]
instance regular_space.t1_space [regular_space Œ±] : t1_space Œ± :=
begin
  rw t1_iff_exists_open,
  intros x y hxy,
  obtain ‚ü®U, hU, h‚ü© := t0_space.t0 x y hxy,
  cases h,
  { exact ‚ü®U, hU, h‚ü© },
  { obtain ‚ü®R, hR, hh‚ü© := regular_space.regular (is_closed_compl_iff.mpr hU) (not_not.mpr h.1),
    obtain ‚ü®V, hV, hhh‚ü© := mem_nhds_sets_iff.1 (filter.inf_principal_eq_bot.1 hh.2),
    exact ‚ü®R, hR, hh.1 (mem_compl h.2), hV hhh.2‚ü© }
end

lemma nhds_is_closed [regular_space Œ±] {a : Œ±} {s : set Œ±} (h : s ‚àà ùìù a) :
  ‚àÉ t ‚àà ùìù a, t ‚äÜ s ‚àß is_closed t :=
let ‚ü®s', h‚ÇÅ, h‚ÇÇ, h‚ÇÉ‚ü© := mem_nhds_sets_iff.mp h in
have ‚àÉt, is_open t ‚àß s'·∂ú ‚äÜ t ‚àß ùìù[t] a = ‚ä•,
  from regular_space.regular (is_closed_compl_iff.mpr h‚ÇÇ) (not_not_intro h‚ÇÉ),
let ‚ü®t, ht‚ÇÅ, ht‚ÇÇ, ht‚ÇÉ‚ü© := this in
‚ü®t·∂ú,
  mem_sets_of_eq_bot $ by rwa [compl_compl],
  subset.trans (compl_subset_comm.1 ht‚ÇÇ) h‚ÇÅ,
  is_closed_compl_iff.mpr ht‚ÇÅ‚ü©

lemma closed_nhds_basis [regular_space Œ±] (a : Œ±) :
  (ùìù a).has_basis (Œª s : set Œ±, s ‚àà ùìù a ‚àß is_closed s) id :=
‚ü®Œª t, ‚ü®Œª t_in, let ‚ü®s, s_in, h_st, h‚ü© := nhds_is_closed t_in in ‚ü®s, ‚ü®s_in, h‚ü©, h_st‚ü©,
       Œª ‚ü®s, ‚ü®s_in, hs‚ü©, hst‚ü©, mem_sets_of_superset s_in hst‚ü©‚ü©

instance subtype.regular_space [regular_space Œ±] {p : Œ± ‚Üí Prop} : regular_space (subtype p) :=
‚ü®begin
   intros s a hs ha,
   rcases is_closed_induced_iff.1 hs with ‚ü®s, hs', rfl‚ü©,
   rcases regular_space.regular hs' ha with ‚ü®t, ht, hst, hat‚ü©,
   refine ‚ü®coe ‚Åª¬π' t, is_open_induced ht, preimage_mono hst, _‚ü©,
   rw [nhds_within, nhds_induced, ‚Üê comap_principal, ‚Üê comap_inf, ‚Üê nhds_within, hat, comap_bot]
 end‚ü©

variable (Œ±)
@[priority 100] -- see Note [lower instance priority]
instance regular_space.t2_space [regular_space Œ±] : t2_space Œ± :=
‚ü®Œª x y hxy,
let ‚ü®s, hs, hys, hxs‚ü© := regular_space.regular is_closed_singleton
    (mt mem_singleton_iff.1 hxy),
  ‚ü®t, hxt, u, hsu, htu‚ü© := empty_in_sets_eq_bot.2 hxs,
  ‚ü®v, hvt, hv, hxv‚ü© := mem_nhds_sets_iff.1 hxt in
‚ü®v, s, hv, hs, hxv, singleton_subset_iff.1 hys,
eq_empty_of_subset_empty $ Œª z ‚ü®hzv, hzs‚ü©, htu ‚ü®hvt hzv, hsu hzs‚ü©‚ü©‚ü©

@[priority 100] -- see Note [lower instance priority]
instance regular_space.t2_5_space [regular_space Œ±] : t2_5_space Œ± :=
‚ü®Œª x y hxy,
let ‚ü®U, V, hU, hV, hh_1, hh_2, hUV‚ü© := t2_space.t2 x y hxy,
  hxcV := not_not.mpr ((interior_maximal (subset_compl_iff_disjoint.mpr hUV) hU) hh_1),
  ‚ü®R, hR, hh‚ü© := regular_space.regular is_closed_closure (by rwa closure_eq_compl_interior_compl),
  ‚ü®A, hA, hhh‚ü© := mem_nhds_sets_iff.1 (filter.inf_principal_eq_bot.1 hh.2) in
‚ü®A, V, hhh.1, hV, subset_eq_empty ((closure V).inter_subset_inter_left
  (subset.trans (closure_minimal hA (is_closed_compl_iff.mpr hR)) (compl_subset_compl.mpr hh.1)))
  (compl_inter_self (closure V)), hhh.2, hh_2‚ü©‚ü©

variable {Œ±}

lemma disjoint_nested_nhds [regular_space Œ±] {x y : Œ±} (h : x ‚â† y) :
  ‚àÉ (U‚ÇÅ V‚ÇÅ ‚àà ùìù x) (U‚ÇÇ V‚ÇÇ ‚àà ùìù y), is_closed V‚ÇÅ ‚àß is_closed V‚ÇÇ ‚àß is_open U‚ÇÅ ‚àß is_open U‚ÇÇ ‚àß
  V‚ÇÅ ‚äÜ U‚ÇÅ ‚àß V‚ÇÇ ‚äÜ U‚ÇÇ ‚àß U‚ÇÅ ‚à© U‚ÇÇ = ‚àÖ :=
begin
  rcases t2_separation h with ‚ü®U‚ÇÅ, U‚ÇÇ, U‚ÇÅ_op, U‚ÇÇ_op, x_in, y_in, H‚ü©,
  rcases nhds_is_closed (mem_nhds_sets U‚ÇÅ_op x_in) with ‚ü®V‚ÇÅ, V‚ÇÅ_in, h‚ÇÅ, V‚ÇÅ_closed‚ü©,
  rcases nhds_is_closed (mem_nhds_sets U‚ÇÇ_op y_in) with ‚ü®V‚ÇÇ, V‚ÇÇ_in, h‚ÇÇ, V‚ÇÇ_closed‚ü©,
  use [U‚ÇÅ, V‚ÇÅ, mem_sets_of_superset V‚ÇÅ_in h‚ÇÅ, V‚ÇÅ_in,
       U‚ÇÇ, V‚ÇÇ, mem_sets_of_superset V‚ÇÇ_in h‚ÇÇ, V‚ÇÇ_in],
  tauto
end

end regularity

section normality

/-- A T‚ÇÑ space, also known as a normal space (although this condition sometimes
  omits T‚ÇÇ), is one in which for every pair of disjoint closed sets `C` and `D`,
  there exist disjoint open sets containing `C` and `D` respectively. -/
class normal_space (Œ± : Type u) [topological_space Œ±] extends t1_space Œ± : Prop :=
(normal : ‚àÄ s t : set Œ±, is_closed s ‚Üí is_closed t ‚Üí disjoint s t ‚Üí
  ‚àÉ u v, is_open u ‚àß is_open v ‚àß s ‚äÜ u ‚àß t ‚äÜ v ‚àß disjoint u v)

theorem normal_separation [normal_space Œ±] {s t : set Œ±}
  (H1 : is_closed s) (H2 : is_closed t) (H3 : disjoint s t) :
  ‚àÉ u v, is_open u ‚àß is_open v ‚àß s ‚äÜ u ‚àß t ‚äÜ v ‚àß disjoint u v :=
normal_space.normal s t H1 H2 H3

theorem normal_exists_closure_subset [normal_space Œ±] {s t : set Œ±} (hs : is_closed s)
  (ht : is_open t) (hst : s ‚äÜ t) :
  ‚àÉ u, is_open u ‚àß s ‚äÜ u ‚àß closure u ‚äÜ t :=
begin
  have : disjoint s t·∂ú, from Œª x ‚ü®hxs, hxt‚ü©, hxt (hst hxs),
  rcases normal_separation hs (is_closed_compl_iff.2 ht) this
    with ‚ü®s', t', hs', ht', hss', htt', hs't'‚ü©,
  refine ‚ü®s', hs', hss',
    subset.trans (closure_minimal _ (is_closed_compl_iff.2 ht')) (compl_subset_comm.1 htt')‚ü©,
  exact Œª x hxs hxt, hs't' ‚ü®hxs, hxt‚ü©
end

@[priority 100] -- see Note [lower instance priority]
instance normal_space.regular_space [normal_space Œ±] : regular_space Œ± :=
{ regular := Œª s x hs hxs, let ‚ü®u, v, hu, hv, hsu, hxv, huv‚ü© :=
    normal_separation hs is_closed_singleton
      (Œª _ ‚ü®hx, hy‚ü©, hxs $ mem_of_eq_of_mem (eq_of_mem_singleton hy).symm hx) in
    ‚ü®u, hu, hsu, filter.empty_in_sets_eq_bot.1 $ filter.mem_inf_sets.2
      ‚ü®v, mem_nhds_sets hv (singleton_subset_iff.1 hxv), u, filter.mem_principal_self u,
        inter_comm u v ‚ñ∏ huv‚ü©‚ü© }

-- We can't make this an instance because it could cause an instance loop.
lemma normal_of_compact_t2 [compact_space Œ±] [t2_space Œ±] : normal_space Œ± :=
begin
  refine ‚ü®assume s t hs ht st, _‚ü©,
  simp only [disjoint_iff],
  exact compact_compact_separated hs.compact ht.compact st.eq_bot
end

end normality

/-- In a compact t2 space, the connected component of a point equals the intersection of all
its clopen neighbourhoods. -/
lemma connected_component_eq_Inter_clopen [t2_space Œ±] [compact_space Œ±] {x : Œ±} :
  connected_component x = ‚ãÇ Z : {Z : set Œ± // is_clopen Z ‚àß x ‚àà Z}, Z :=
begin
  apply eq_of_subset_of_subset connected_component_subset_Inter_clopen,
  -- Reduce to showing that the clopen intersection is connected.
  refine is_preconnected.subset_connected_component _ (mem_Inter.2 (Œª Z, Z.2.2)),
  -- We do this by showing that any disjoint cover by two closed sets implies
  -- that one of these closed sets must contain our whole thing.
  -- To reduce to the case where the cover is disjoint on all of `Œ±` we need that `s` is closed
  have hs : @is_closed _ _inst_1 (‚ãÇ (Z : {Z : set Œ± // is_clopen Z ‚àß x ‚àà Z}), ‚ÜëZ) :=
    is_closed_Inter (Œª Z, Z.2.1.2),
  rw (is_preconnected_iff_subset_of_fully_disjoint_closed hs),
  intros a b ha hb hab ab_empty,
  haveI := @normal_of_compact_t2 Œ± _ _ _,
  -- Since our space is normal, we get two larger disjoint open sets containing the disjoint
  -- closed sets. If we can show that our intersection is a subset of any of these we can then
  -- "descend" this to show that it is a subset of either a or b.
  rcases normal_separation ha hb (disjoint_iff.2 ab_empty) with ‚ü®u, v, hu, hv, hau, hbv, huv‚ü©,
  -- If we can find a clopen set around x, contained in u ‚à™ v, we get a disjoint decomposition
  -- Z = Z ‚à© u ‚à™ Z ‚à© v of clopen sets. The intersection of all clopen neighbourhoods will then lie
  -- in whichever of u or v x lies in and hence will be a subset of either a or b.
  suffices : ‚àÉ (Z : set Œ±), is_clopen Z ‚àß x ‚àà Z ‚àß Z ‚äÜ u ‚à™ v,
  { cases this with Z H,
    rw [disjoint_iff_inter_eq_empty] at huv,
    have H1 := is_clopen_inter_of_disjoint_cover_clopen H.1 H.2.2 hu hv huv,
    rw [union_comm] at H,
    have H2 := is_clopen_inter_of_disjoint_cover_clopen H.1 H.2.2 hv hu (inter_comm u v ‚ñ∏ huv),
    by_cases (x ‚àà u),
    -- The x ‚àà u case.
    { left,
      suffices : (‚ãÇ (Z : {Z : set Œ± // is_clopen Z ‚àß x ‚àà Z}), ‚ÜëZ) ‚äÜ u,
      { rw ‚Üêset.disjoint_iff_inter_eq_empty at huv,
        replace hab : (‚ãÇ (Z : {Z // is_clopen Z ‚àß x ‚àà Z}), ‚ÜëZ) ‚â§ a ‚à™ b := hab,
        replace this : (‚ãÇ (Z : {Z // is_clopen Z ‚àß x ‚àà Z}), ‚ÜëZ) ‚â§ u := this,
        exact disjoint.left_le_of_le_sup_right hab (huv.mono this hbv) },
      { apply subset.trans _ (inter_subset_right Z u),
        apply Inter_subset (Œª Z : {Z : set Œ± // is_clopen Z ‚àß x ‚àà Z}, ‚ÜëZ)
          ‚ü®Z ‚à© u, H1, mem_inter H.2.1 h‚ü© } },
    -- If x ‚àâ u, we get x ‚àà v since x ‚àà u ‚à™ v. The rest is then like the x ‚àà u case.
    have h1 : x ‚àà v,
    { cases (mem_union x u v).1 (mem_of_subset_of_mem (subset.trans hab
        (union_subset_union hau hbv)) (mem_Inter.2 (Œª i, i.2.2))) with h1 h1,
      { exfalso, exact h h1},
      { exact h1} },
    right,
    suffices : (‚ãÇ (Z : {Z : set Œ± // is_clopen Z ‚àß x ‚àà Z}), ‚ÜëZ) ‚äÜ v,
    { rw [inter_comm, ‚Üêset.disjoint_iff_inter_eq_empty] at huv,
      replace hab : (‚ãÇ (Z : {Z // is_clopen Z ‚àß x ‚àà Z}), ‚ÜëZ) ‚â§ a ‚à™ b := hab,
      replace this : (‚ãÇ (Z : {Z // is_clopen Z ‚àß x ‚àà Z}), ‚ÜëZ) ‚â§ v := this,
      exact disjoint.left_le_of_le_sup_left hab (huv.mono this hau) },
    { apply subset.trans _ (inter_subset_right Z v),
      apply Inter_subset (Œª Z : {Z : set Œ± // is_clopen Z ‚àß x ‚àà Z}, ‚ÜëZ)
        ‚ü®Z ‚à© v, H2, mem_inter H.2.1 h1‚ü© } },
  -- Now we find the required Z. We utilize the fact that X \ u ‚à™ v will be compact,
  -- so there must be some finite intersection of clopen neighbourhoods of X disjoint to it,
  -- but a finite intersection of clopen sets is clopen so we let this be our Z.
  have H1 := ((is_closed_compl_iff.2 (is_open_union hu hv)).compact.inter_Inter_nonempty
    (Œª Z : {Z : set Œ± // is_clopen Z ‚àß x ‚àà Z}, Z) (Œª Z, Z.2.1.2)),
  rw [‚Üênot_imp_not, not_forall, not_nonempty_iff_eq_empty, inter_comm] at H1,
  have huv_union := subset.trans hab (union_subset_union hau hbv),
  rw [‚Üê compl_compl (u ‚à™ v), subset_compl_iff_disjoint] at huv_union,
  cases H1 huv_union with Zi H2,
  refine ‚ü®(‚ãÇ (U ‚àà Zi), subtype.val U), _, _, _‚ü©,
  { exact is_clopen_bInter (Œª Z hZ, Z.2.1) },
  { exact mem_bInter_iff.2 (Œª Z hZ, Z.2.2) },
  { rwa [not_nonempty_iff_eq_empty, inter_comm, ‚Üêsubset_compl_iff_disjoint, compl_compl] at H2 }
end

section connected_component_setoid
local attribute [instance] connected_component_setoid

/-- `connected_components Œ±` is Hausdorff when `Œ±` is Hausdorff and compact -/
instance connected_components.t2 [t2_space Œ±] [compact_space Œ±] :
  t2_space (connected_components Œ±) :=
begin
  -- Proof follows that of: https://stacks.math.columbia.edu/tag/0900
  -- Fix 2 distinct connected components, with points a and b
  refine ‚ü®Œª x y, quotient.induction_on x (quotient.induction_on y (Œª a b ne, _))‚ü©,
  rw connected_component_nrel_iff at ne,
  have h := connected_component_disjoint ne,
  -- write ‚ü¶b‚üß as the intersection of all clopen subsets containing it
  rw [connected_component_eq_Inter_clopen, disjoint_iff_inter_eq_empty, inter_comm] at h,
  -- Now we show that this can be reduced to some clopen containing ‚ü¶b‚üß being disjoint to ‚ü¶a‚üß
  cases is_closed_connected_component.compact.elim_finite_subfamily_closed _ _ h
    with fin_a ha,
  swap, { exact Œª Z, Z.2.1.2 },
  set U : set Œ± := (‚ãÇ (i : {Z // is_clopen Z ‚àß b ‚àà Z}) (H : i ‚àà fin_a), ‚Üëi) with hU,
  rw ‚ÜêhU at ha,
  have hu_clopen : is_clopen U := is_clopen_bInter (Œª i j, i.2.1),
  -- This clopen and its complement will separate the points corresponding to ‚ü¶a‚üß and ‚ü¶b‚üß
  use [quotient.mk '' U, quotient.mk '' U·∂ú],
  -- Using the fact that clopens are unions of connected components, we show that
  -- U and U·∂ú is the preimage of a clopen set in the quotient
  have hu : quotient.mk ‚Åª¬π' (quotient.mk '' U) = U :=
    (connected_components_preimage_image U ‚ñ∏ eq.symm) hu_clopen.eq_union_connected_components,
  have huc : quotient.mk ‚Åª¬π' (quotient.mk '' U·∂ú) = U·∂ú :=
    (connected_components_preimage_image U·∂ú ‚ñ∏ eq.symm)
      (is_clopen_compl hu_clopen).eq_union_connected_components,
  -- showing that U and U·∂ú are open and separates ‚ü¶a‚üß and ‚ü¶b‚üß
  refine ‚ü®_,_,_,_,_‚ü©,
  { rw [(quotient_map_iff.1 quotient_map_quotient_mk).2 _, hu],
    exact hu_clopen.1 },
  { rw [(quotient_map_iff.1 quotient_map_quotient_mk).2 _, huc],
    exact is_open_compl_iff.2 hu_clopen.2 },
  { exact mem_image_of_mem _ (mem_Inter.2 (Œª Z, mem_Inter.2 (Œª Zmem, Z.2.2))) },
  { apply mem_image_of_mem,
    exact mem_of_subset_of_mem (subset_compl_iff_disjoint.2 ha) (@mem_connected_component _ _ a) },
  apply preimage_injective.2 (@surjective_quotient_mk _ _),
  rw [preimage_inter, preimage_empty, hu, huc, inter_compl_self _],
end

end connected_component_setoid
